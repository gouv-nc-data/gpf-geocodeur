name: Build docker image

on:
  push:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: write
      id-token: write
      checks: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # - name: Ruff analysis
      #   uses: astral-sh/ruff-action@v1
      #   with:
      #     src: "./app/"

      # - name: Install dev dependencies
      #   run: |
      #     python -m pip install --upgrade pip
      #     pip install -r requirements.txt
      #     pip install -r requirements-dev.txt

      # - name: Build coverage file
      #   run: |
      #     pytest --junitxml=pytest.xml --cov-report=term-missing:skip-covered --cov=app tests/ | tee pytest-coverage.txt

      # - name: Pytest coverage comment
      #   uses: MishaKav/pytest-coverage-comment@v1
      #   id: coverageComment
      #   with:
      #     pytest-coverage-path: ./pytest-coverage.txt
      #     junitxml-path: ./pytest.xml
      #     hide-comment: true
      
      # - name: Check the output coverage
      #   run: |
      #     echo "Coverage Percentage - ${{ steps.coverageComment.outputs.coverage }}"
      #     echo "Coverage Color - ${{ steps.coverageComment.outputs.color }}"
      #     echo "Coverage Html - ${{ steps.coverageComment.outputs.coverageHtml }}"

      #     echo "Coverage Warnings - ${{ steps.coverageComment.outputs.warnings }}"

      #     echo "Coverage Errors - ${{ steps.coverageComment.outputs.errors }}"
      #     echo "Coverage Failures - ${{ steps.coverageComment.outputs.failures }}"
      #     echo "Coverage Skipped - ${{ steps.coverageComment.outputs.skipped }}"
      #     echo "Coverage Tests - ${{ steps.coverageComment.outputs.tests }}"
      #     echo "Coverage Time - ${{ steps.coverageComment.outputs.time }}"

      #     echo "Not Success Test Info - ${{ steps.coverageComment.outputs.notSuccessTestInfo }}"

      
      # - name: Update Readme with Coverage Html
      #   if: ${{ github.ref == 'refs/heads/main' }}
      #   run: |
      #     sed -i '/<!-- Pytest Coverage Comment:Begin -->/,/<!-- Pytest Coverage Comment:End -->/c\<!-- Pytest Coverage Comment:Begin -->\n\${{ steps.coverageComment.outputs.coverageHtml }}\n<!-- Pytest Coverage Comment:End -->' ./README.md

      # # - name: Commit & Push changes to Readme
      # #   if: ${{ github.ref == 'refs/heads/main' }}
      # #   uses: actions-js/push@master
      # #   with:
      # #     message: Update coverage on Readme
      # #     github_token: ${{ secrets.GITHUB_TOKEN }}

      # - name: Log in to ghcr
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ${{ env.REGISTRY }}
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.GITHUB_TOKEN }}

      # - name: Extract metadata (tags, labels) for Docker
      #   id: meta
      #   uses: docker/metadata-action@v5
      #   with:
      #     images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      #     tags: |
      #       # set latest tag for default branch
      #       type=raw,value=latest,enable={{is_default_branch}}

      # - name: Build and push Docker image
      #   id: push
      #   uses: docker/build-push-action@v3
      #   with:
      #     context: .
      #     push: true
      #     tags: ${{ steps.meta.outputs.tags }}
      #     labels: ${{ steps.meta.outputs.labels }}
