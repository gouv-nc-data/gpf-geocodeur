openapi: 3.0.1
info:
  title: API Localisation Nouvelle-Calédonie
  description: "L’API permet d’interroger facilement les données de localisation de Nouvelle-Calédonie basées sur:
les adresses
les parcelles cadastrales
les points d’intérêt (POI)
En intégrant l'API dans votre système d'information, vous pouvez facilement:
rechercher une localisation
faire de l'autocomplétion et de la vérification de localisation
géolocaliser une localisation sur une carte
faire une recherche géographique inversée (trouver la localisation la plus proche de coordonnées géographiques)
"
  version: 2.0.0
servers:
  - url: $API_URL
tags:
  - name: getCapabilities
    description: Découverte du service
  - name: search
    description: Géocodage direct
  - name: reverse
    description: Géocodage inverse
paths:
  /getCapabilities:
    get:
      tags:
        - getCapabilities
      summary: Découvrir le service
      description: "Découvrir le service: les opérations possibles, les ressources disponibles et les options proposées."
      operationId: getCapabilities
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Getcapabilities"
        404:
          description: Not found

  /search:
    get:
      tags:
        - search
      summary: Recherche par géocodage direct
      operationId: search
      parameters:
        - name: q
          in: query
          description: "chaîne décrivant la localisation à rechercher<br>

            Exemples de requêtes:<br>
              - /search?q=127 rue daly<br>
              - /search?q=mediatheque dumbea<br>
              - /search?q=lot 18 koniambo"
          required: true
          schema:
            type: string
        - name: index
          in: query
          description: "index(es) de recherche :<br>
            - <b>address</b> pour la recherche par adresse<br>
            - <b>cadastre</b> pour la recherche par centroide de parcelle cadastrale<br>
            - <b>poi</b> pour la recherche par point d'interêt(administrations, lieux-dits, équipements publics, tribus, voies nommées, etc.)<br>

            Il est possible de spécifier plusieurs indexes séparés par une virgule.

            <br>Exemples:<br>
            - /search?index=poi,address"
          required: false
          schema:
            $ref: "#/components/schemas/Index"
        - name: limit
          in: query
          description: Nombre maximum de candidats retournés (entre 1 et 20)
          schema:
            type: integer
            default: 10
        - name: lat
          in: query
          description: "Latitude d'un localisant pour favoriser les candidats les plus proches."
          schema:
            type: number
        - name: lon
          in: query
          description: "Longitude d'un localisant pour favoriser les candidats les plus proches."
          schema:
            type: number
        - name: returntruegeometry
          in: query
          description: "indique si la vraie géométrie doit être retournée"
          schema:
            type: boolean
            default: false
        - name: postcode
          in: query
          description: "Filtre pour les index address et poi. Il permet de filtrer les résultats par code postal."
          schema:
            $ref: "#/components/schemas/PostalCode"
        - name: citycode
          in: query
          description: "Filtre pour les index address, cadastre et poi. Il permet de filtrer les résultats par code INSEE."
          schema:
            $ref: "#/components/schemas/InseeCode"
        - name: type
          in: query
          description: "Filtre pour l'index address. Il permet de filtrer par type de données adresse : numéro de maison, rue, commune, ..."
          schema:
            type: string
            enum: ["housenumber", "street", "locality", "municipality"]
        - name: city
          in: query
          description: "Filtre pour les index address et poi. Il permet de filtrer par nom de commune."
          schema:
            type: string
        - name: category
          in: query
          description: |
            Filtre pour l'index poi. Il permet de filtrer par catégorie de poi.
            Les valeurs possibles sont listées dans le getCapabilities du service de géocodage.
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                    example: FeatureCollection
                  features:
                    type: array
                    items:
                      $ref: "#/components/schemas/GeocodeResponse"
        "400":
          description: "Parse query failed"
          content:
            application/json: {}
  /reverse:
    get:
      tags:
        - reverse
      summary: Recherche par géocodage inverse
      operationId: reverse
      parameters:
        - name: searchgeom
          in: query
          required: false
          description:
            'Géométrie de recherche. La géométrie est réalisé par intersection géométrique. Si ce paramètre est utilisé seul, c''est que l''on souhaite une recherche sans ordonnancement des résultats (tous les objets intersectant la géométrie de recherche ont un score de 1).<br>
            Si on veut ordonner les résultats, on peut alors utiliser les paramètres lon et lat pour préciser un point d''ordonnancement. <br>
            Ce paramètre n''est pas obligatoire pour des raisons de rétro-compatibilité. Si searchgeom n''est pas utilisé alors les paramètres lon et lat doivent l''être et on parle de point de recherche. <br>
            Lorsque la recherche est réalisée par intersection géométrique. Les types géométrique (au format GeoJSON) autorisés sont :
            - Polygon
            - Circle
            <br>
            Exemple de géométrie de type Circle :<br>
            {<br>
            &nbsp;&nbsp;&nbsp;&nbsp;"type": "Circle",<br>
            &nbsp;&nbsp;&nbsp;&nbsp;"coordinates": [2.294469, 48.858244],<br>
            &nbsp;&nbsp;&nbsp;&nbsp;"radius": 100<br>
            }<br>
            Pour l''index <b>address</b>, seules les géométries de type ''Polygon'' et ''Circle'' sont autorisées.<br>
            Le plus grand côté du rectangle d’emprise de la géométrie ne doit pas excéder 1000 mètres.'
          schema:
            type: string
        - name: lon
          in: query
          description: |
            Si searchgeom est utilisé, il s'agit de la longitude du point d'ordonnancement. C'est le point à partir duquel est calculée la distance, puis le score permettant l'ordonnancement des résultats. <br>
            Dans un soucis de rétro-compatibilité, si searchgeom n'est pas utilisé, il s'agit de la longitude du point de recherche. À partir de ce point, un cercle est créé pour effectuer la recherche. En plus, ce sera aussi la longitude du point d'ordonnancement.
          required: false
          schema:
            type: number
        - name: lat
          in: query
          description: |
            Si searchgeom est utilisé, il s'agit de la latitude  du point d'ordonnancement. C'est le point à partir duquel est calculée la distance, puis le score permettant l'ordonnancement des résultats.
            Dans un soucis de rétro-compatibilité, si searchgeom n'est pas utilisé, il s'agit de la latitude du point de recherche. À partir de ce point, un cercle est créé pour effectuer la recherche. En plus, ce sera aussi la latitude du point d'ordonnancement.
          required: false
          schema:
            type: number
        - name: index
          in: query
          description: "index de recherche :<br>
            - <b>address</b> pour la recherche par adresse<br>
            - <b>cadastre</b> pour la recherche de centroide de Cadastrele cadastrale<br>
            - <b>poi</b> pour la recherche par lieu et unité administrative<br>

            Il est possible de spécifier plusieurs indexes séparés par une virgule.

            Exemples:
            - /search?index=Cadastre
            - /search?index=poi,address"
          required: false
          schema:
            $ref: "#/components/schemas/Index"
        - name: limit
          in: query
          description: "nombre maximum de candidats retournés (entre 1 et 20)"
          schema:
            type: integer
            default: 10
        - name: returntruegeometry
          in: query
          description: "indique si la vraie géométrie doit être retournée"
          schema:
            type: boolean
            default: False
        - name: postcode
          in: query
          description: "Filtre pour les index address, cadastre et poi. Il permet de filtrer les résultats par code postal."
          schema:
            $ref: "#/components/schemas/PostalCode"
        - name: citycode
          in: query
          description: "Filtre pour les index address, cadastre et poi. Il permet de filtrer les résultats par code INSEE."
          schema:
            $ref: "#/components/schemas/InseeCode"
        - name: type
          in: query
          description: "Filtre pour l'index address. Il permet de filtrer par type de données adresse : numéro de maison, rue, commune, ..."
          schema:
            type: string
            enum: ["housenumber", "street", "locality", "municipality"]
        - name: city
          in: query
          description: "Filtre pour les index address, cadastre et POI. Il permet de filtrer par nom de commune."
          schema:
            type: string
        - name: category
          in: query
          description: |
            Filtre pour l'index poi. Il permet de filtrer par catégorie de poi.
            Les valeurs possibles sont listées dans le getCapabilities du service de géocodage.
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                    example: FeatureCollection
                  features:
                    type: array
                    items:
                      $ref: "#/components/schemas/GeocodeReverseResponse"
        "400":
          description: "Parse query failed"
          content:
            application/json: {}

components:
  schemas:
    Getcapabilities:
      type: "object"
      properties:
        info:
          type: "object"
          properties:
            name:
              type: "string"
            url:
              type: "string"
            description:
              type: "string"
        api:
          type: "object"
          properties:
            name:
              type: "string"
              example: "rest"
            version:
              type: "string"
              example: "0.0.0"
        operations:
          type: "array"
          items:
            type: "object"
            properties:
              id:
                type: "string"
              description:
                type: "string"
              url:
                type: "string"
              methods:
                type: "array"
                items:
                  type: "string"
                  enum: ["GET", "POST", "PUT", "DELETE"]
              parameters:
                type: "array"
                items:
                  type: "object"
                  properties:
                    name:
                      type: "string"
                    in:
                      type: "string"
                    description:
                      type: "string"
                    required:
                      type: "boolean"
                    default:
                      description: "default value"
                    schema:
                      type: "object"
                      properties:
                        type:
                          type: "string"
                        example:
                          type: "string"
                    example:
                      type: "string"
        indexes:
          type: "array"
          items:
            type: "object"
            properties:
              id:
                type: "string"
              description:
                type: "string"
              fields:
                type: "array"
                items:
                  type: "object"
                  properties:
                    name:
                      type: "string"
                    description:
                      type: "string"
                    type:
                      type: "string"
                    queryable:
                      type: "boolean"
                    filter:
                      type: "boolean"
                    values:
                      type: "array"
                      items:
                        description: allowed value

    GeocodeResponse:
      type: object
      oneOf:
        - $ref: "#/components/schemas/Address"
        - $ref: "#/components/schemas/Poi"
        - $ref: "#/components/schemas/Cadastre"

    GeocodeReverseResponse:
      type: object
      oneOf:
        - $ref: "#/components/schemas/AddressReverse"
        - $ref: "#/components/schemas/PoiReverse"
        - $ref: "#/components/schemas/CadastreReverse"

    Cadastre:
      type: object
      properties:
        type:
          type: string
          example: Feature
        properties:
          $ref: "#/components/schemas/CadastreProperties"
        geometry:
          $ref: "#/components/schemas/GeometryPoint"

    CadastreProperties:
      type: object
      properties:
        id:
          type: string
          description: "Identifiant cadastral"
        name:
          type: string
          description: "Libellé"
        toponym:
          type: string
          description: "Libellé abrégé"
        categorie:
          type: string
          enum: ["Cadastre"]
        citycode:
          type: string
          description: "Code (INSEE) de la commune"
        city:
          type: string
          description: "Nom de la commune"
        nic:
          type: string
          description: "Numéro cadastral"
        lot:
          type: string
          description: "Numéro de lot"
        lotissement:
          type: string
          description: "Lotissement cadastral"
        section:
          type: string
          description: "Section cadastrale"
        typologie:
          type: string
          description: "Typologie cadastrale"
        surf_cad:
          type: string
          description: "Surface cadastrale"
        truegeometry:
          $ref: "#/components/schemas/GeometryPolygon"
        score:
          type: number
        _type:
          type: string
          enum: ["cadastre"]
      example:
        id: "652543-4035"
        name: "Lot 36 LOTISSEMENT SOULARD 2EME PARTIE PONT DES FRANCAIS - 652543-4035"
        toponym: "Lot 36 LOTISSEMENT SOULARD 2EME PARTIE PONT DES FRANCAIS"
        category: "CADASTRE"
        citycode: "98817"
        city: "MONT DORE"
        nic: "652543-4035"
        lot: "36"
        lotissement: "LOTISSEMENT SOULARD 2EME PARTIE"
        section: "PONT DES FRANCAIS"
        typologie: "PRIVE"
        surf_cad: "0ha 15a 90ca "
        score": 0.6363636363636362
        _type: "cadastre"

    CadastreReverse:
      type: object
      properties:
        type:
          type: string
          example: Feature
        properties:
          $ref: "#/components/schemas/CadastreReverseProperties"
        geometry:
          $ref: "#/components/schemas/GeometryPoint"

    CadastreReverseProperties:
      type: object
      properties:
        id:
          type: string
          description: "Identifiant cadastral"
        name:
          type: string
          description: "Libellé"
        toponym:
          type: string
          description: "Libellé abrégé"
        categorie:
          type: string
          enum: ["Cadastre"]
        citycode:
          type: string
          description: "Code (INSEE) de la commune"
        city:
          type: string
          description: "Nom de la commune"
        nic:
          type: string
          description: "Numéro cadastral"
        lot:
          type: string
          description: "Numéro de lot"
        lotissement:
          type: string
          description: "Lotissement cadastral"
        section:
          type: string
          description: "Section cadastrale"
        typologie:
          type: string
          description: "Typologie cadastrale"
        surf_cad:
          type: string
          description: "Surface cadastrale"
        truegeometry:
          $ref: "#/components/schemas/GeometryPolygon"
        score:
          type: number
        _type:
          type: string
          enum: ["cadastre"]
        distance:
          type: number
      example:
        id: "652543-4035"
        name: "Lot 36 LOTISSEMENT SOULARD 2EME PARTIE PONT DES FRANCAIS - 652543-4035"
        toponym: "Lot 36 LOTISSEMENT SOULARD 2EME PARTIE PONT DES FRANCAIS"
        category: "CADASTRE"
        citycode: "98817"
        city: "MONT DORE"
        nic: "652543-4035"
        lot: "36"
        lotissement: "LOTISSEMENT SOULARD 2EME PARTIE"
        section: "PONT DES FRANCAIS"
        typologie: "PRIVE"
        surf_cad: "0ha 15a 90ca "
        score": 0.6363636363636362
        _type: "cadastre"
        distance: 100

    Address:
      type: object
      properties:
        type:
          type: string
          example: Feature
        properties:
          $ref: "#/components/schemas/AddressProperties"
        geometry:
          $ref: "#/components/schemas/GeometryPoint"
    AddressProperties:
      type: object
      properties:
        label:
          type: string
          description: "Libellé complet de l'adresse"
        id:
          type: string
        banId:
          type: string
        postcode:
          $ref: "#/components/schemas/PostalCode"
        city:
          type: string
          description: "Commune de l'adresse"
        street:
          type: string
          description: "Rue de l'adresse"
        housenumber:
          type: string
        citycode:
          $ref: "#/components/schemas/InseeCode"
        x:
          type: number
          description: "Longitude de l'adresse"
        y:
          type: number
          description: "Latitude de l'adresse"
        score:
          type: number
        name:
          type: string
        type:
          type: string
          enum: ["housenumber", "street", "locality", "municipality"]
        _type:
          type: string
          description: "Rétro-compatibilité"
        context:
          type: string
        importance:
          type: number
      example:
        label: "127 Rue Arnold Daly 98800 Nouméa"
        id: "98818_pu4ah0_00127"
        banId: "34196d04-39ef-4a6d-8966-180693012700"
        postcode: "98800"
        city: "Nouméa"
        street: "Rue Arnold Daly"
        housenumber: "127"
        citycode: "98818"
        x: 166.476749
        y: -22.277643
        score: 0.5716690909090909
        name: "127 Rue Arnold Daly"
        type: "housenumber"
        _type: "address"
        contexte: "988, Nouvelle-Calédonie"
        importance: "0.78836"

    AddressReverse:
      type: object
      properties:
        type:
          type: string
          example: Feature
        properties:
          $ref: "#/components/schemas/AddressReverseProperties"
        geometry:
          $ref: "#/components/schemas/GeometryPoint"
    AddressReverseProperties:
      type: object
      properties:
        label:
          type: string
          description: "Libellé complet de l'adresse"
        id:
          type: string
        postcode:
          $ref: "#/components/schemas/PostalCode"
        city:
          type: string
          description: "Commune de l'adresse"
        street:
          type: string
          description: "Rue de l'adresse"
        housenumber:
          type: string
        citycode:
          $ref: "#/components/schemas/InseeCode"
        x:
          type: number
          description: "Longitude de l'adresse"
        y:
          type: number
          description: "Latitude de l'adresse"
        score:
          type: number
        name:
          type: string
        type:
          type: string
          enum: ["housenumber", "street", "locality", "municipality"]
        _type:
          type: string
          description: "Rétro-compatibilité"
        context:
          type: string
        importance:
          type: number
        distance:
          type: number
      example:
        label: "127 Rue Arnold Daly 98800 Nouméa"
        id: "98818_pu4ah0_00127"
        banId: "34196d04-39ef-4a6d-8966-180693012700"
        postcode: "98800"
        city: "Nouméa"
        street: "Rue Arnold Daly"
        housenumber: "127"
        citycode: "98818"
        x: 166.476749
        y: -22.277643
        score: 0.5716690909090909
        name: "127 Rue Arnold Daly"
        type: "housenumber"
        _type: "address"
        contexte: "988, Nouvelle-Calédonie"
        importance: "0.78836"
        distance: 100

    Poi:
      type: object
      properties:
        type:
          type: string
          example: Feature
        properties:
          $ref: "#/components/schemas/PoiProperties"
        geometry:
          $ref: "#/components/schemas/GeometryPoint"
    PoiProperties:
      type: object
      properties:
        id:
          type: string
          description: "identifiant du POI"
        name:
          type: string
          description: "Libellé du toponyme"
        toponym:
          type: string
          description: "Libellé abrégé du toponyme"
        source:
          type: string
          description: "La source du POI"
        citycode:
          type: array
          items:
            $ref: "#/components/schemas/InseeCode"
        city:
          type: array
          items:
            type: string
        category:
          $ref: "#/components/schemas/PoiType"
        type:
          type: string
          description: "Type détaillé de POI"
        truegeometry:
          $ref: "#/components/schemas/Geometry"
        score:
          type: number
        _type:
          type: string
          enum: ["poi"]
      example:
        id": "SERAIL_ATLAS_50118"
        name": "Guichet OPT annexe de Dumbéa Mairie"
        category": "ADMINISTRATION ET ORGANISME"
        type": "Etablissement d'utilité publique"
        citycode": "98805"
        city": "DUMBEA"
        source": "Atlas SERAIL"
        toponym": "Guichet OPT annexe de Dumbéa Mairie"
        score": "0.6363636363636362"
        _type": "poi"

    PoiReverse:
      type: object
      properties:
        type:
          type: string
          example: Feature
        properties:
          $ref: "#/components/schemas/PoiReverseProperties"
        geometry:
          $ref: "#/components/schemas/GeometryPoint"
    PoiReverseProperties:
      type: object
      properties:
        id:
          type: string
          description: "identifiant du POI"
        name:
          type: string
          description: "Libellé du toponyme"
        toponym:
          type: string
          description: "Libellé abrégé du toponyme"
        source:
          type: string
          description: "La source du POI"
        citycode:
          type: array
          items:
            $ref: "#/components/schemas/InseeCode"
        city:
          type: array
          items:
            type: string
        category:
          $ref: "#/components/schemas/PoiType"
        type:
          type: string
          description: "Type détaillé de POI"
        truegeometry:
          $ref: "#/components/schemas/Geometry"
        score:
          type: number
        _type:
          type: string
          enum: ["poi"]
        distance:
          type: number
      example:
        id": "SERAIL_ATLAS_50118"
        name": "Guichet OPT annexe de Dumbéa Mairie"
        category": "ADMINISTRATION ET ORGANISME"
        type": "Etablissement d'utilité publique"
        citycode": "98805"
        city": "DUMBEA"
        source": "Atlas SERAIL"
        toponym": "Guichet OPT annexe de Dumbéa Mairie"
        score": "0.6363636363636362"
        _type": "poi"
        distance: 100

    PoiType:
      type: array
      items:
        type: string

    PostalCode:
      maxLength: 5
      minLength: 5
      type: string
      description: "Code postal"
      enum:
        - 98800
        - 98835
        - 98809
        - 98889
        - 98811
        - 98812
        - 98870
        - 98813
        - 98814
        - 98815
        - 98816
        - 98838
        - 98817
        - 98859
        - 98818
        - 98850
        - 98880
        - 98881
        - 98882
        - 98819
        - 98821
        - 98822
        - 98823
        - 98824
        - 98825
        - 98826
        - 98827
        - 98828
        - 98829
        - 98840
        - 98831
        - 98832
        - 98833
        - 98820
        - 98834

    InseeCode:
      maxLength: 5
      minLength: 5
      type: string
      description: "Code INSEE"
      enum:
        - 98801
        - 98802
        - 98803
        - 98804
        - 98805
        - 98806
        - 98807
        - 98808
        - 98809
        - 98810
        - 98811
        - 98812
        - 98813
        - 98814
        - 98815
        - 98816
        - 98817
        - 98818
        - 98819
        - 98820
        - 98821
        - 98822
        - 98823
        - 98824
        - 98825
        - 98826
        - 98827
        - 98828
        - 98829
        - 98830
        - 98831
        - 98832
        - 98833

    Geometry:
      type: object
      properties:
        type:
          $ref: "#/components/schemas/GeometryType"
        coordinates:
          type: array
          items:
            type: number
      example:
        type: "Point"
        coordinates: [166.476749, -22.277643]

    GeometryPoint:
      type: object
      properties:
        type:
          type: string
          enum: ["Point"]
        coordinates:
          type: array
          items:
            type: number
      example:
        type: "Point"
        coordinates: [166.476749, -22.277643]

    GeometryCircle:
      type: object
      properties:
        type:
          type: string
          enum: ["Circle"]
        coordinates:
          type: array
          items:
            type: number
        radius:
          type: number
      example:
        type: "Circle"
        coordinates: [2.35457222187139, 48.8523027661354]
        radius: 100

    GeometryLineString:
      type: object
      properties:
        type:
          type: string
          enum: ["LineString"]
        coordinates:
          type: array
          items:
            type: number
      example:
        type: "LineString"
        coordinates:
          [
            [2.35457222187139, 48.8523027661354],
            [2.35463049659443, 48.8523731401755],
            [2.35457222187139, 48.8523027661354],
          ]

    GeometryPolygon:
      type: object
      properties:
        type:
          type: string
          enum: ["Polygon"]
        coordinates:
          type: array
          items:
            type: number
      example:
        type: "Polygon"
        coordinates:
          [
            [
              [2.35457222187139, 48.8523027661354],
              [2.35463049659443, 48.8523731401755],
              [2.35465580843827, 48.8523650925735],
              [2.35464724014948, 48.8522756505323],
              [2.35457222187139, 48.8523027661354],
            ],
          ]

    GeometryMultiPolygon:
      type: object
      properties:
        type:
          type: string
          enum: ["MultiPolygon"]
        coordinates:
          type: array
          items:
            type: number
      example:
        type: "MultiPolygon"
        coordinates:
          [
            [
              [
                [2.35457222187139, 48.8523027661354],
                [2.35463049659443, 48.8523731401755],
                [2.35465580843827, 48.8523650925735],
                [2.35457222187139, 48.8523027661354],
              ],
            ],
          ]

    GeometryType:
      type: string
      enum:
        - Point
        - MultiPolygon
        - LineString

    Index:
      type: string
      enum:
        - address
        - poi
        - cadastre
      default: address

    HouseNumberInfos:
      type: object
      properties:
        date:
          type: string
        kind:
          $ref: "#/components/schemas/AddressPositionKing"
        source:
          type: string

    AddressPositionKing:
      type: array
      items:
        type: string
        enum:
          - entrance
          - building
          - staircase
          - unit
          - Cadastre
          - segment
          - utility
          - area
          - postal
          - unknown
